package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    JoinPredicate pred;
    DbIterator c1, c2;
    Tuple cur1, cur2;
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        pred = p;
        c1 = child1;
        c2 = child2;
        cur1 = null;
        cur2 = null;

    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return c1.getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return c2.getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        /*TupleDesc td;
        int len = c1.getTupleDesc().numFields() + c2.getTupleDesc().numFields();
        int len1 = c1.getTupleDesc().numFields();

        Type[] tp = new Type[len];
        String[] fn = new String[len];
        for (int i = 0; i < len; i++) {
            if (i < len1) {
                tp[i] = c1.getTupleDesc().getFieldType(i);
                fn[i] = c1.getTupleDesc().getFieldName(i);
            } else {
                tp[i] = c2.getTupleDesc().getFieldType(i-len1);
                fn[i] = c2.getTupleDesc().getFieldName(i-len1);
            }
        }
        td = new TupleDesc(tp, fn);
        return td;*/
        return TupleDesc.merge(c1.getTupleDesc(), c2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        cur1 = null;
        cur2 = null;
        c1.open();
        c2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        cur1 = null;
        cur2 = null;
        c1.close();
        c2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        cur1 = null;
        cur2 = null;
        c1.rewind();
        c2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (cur1 == null) {
            cur1 = c1.next();
        }
        //System.out.println(c1.hasNext() + " " + c2.hasNext());
        if (c1.hasNext() == false && c2.hasNext() == false) {
            return null;
        }

        while (c1.hasNext() || c2.hasNext()) {
            if (c2.hasNext()) {
                cur2 = c2.next();
                if (pred.filter(cur1, cur2)) {
                    break;
                }
            } else {
                c2.rewind();
                cur1 = c1.next();
                cur2 = c2.next();
                if (pred.filter(cur1, cur2)) {
                    break;
                }
            }
        }

        if (cur1 != null && cur2 != null && pred.filter(cur1, cur2)) {
            int len = c1.getTupleDesc().numFields() + c2.getTupleDesc().numFields();
            int len1 = c1.getTupleDesc().numFields();
            TupleDesc td = getTupleDesc();

            Tuple ret = new Tuple(td);
            for (int i = 0; i < len; i++) {
                if (i < len1) {
                    ret.setField(i, cur1.getField(i));
                } else {
                    ret.setField(i, cur2.getField(i-len1));
                }
            }
            return ret;
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] a = new DbIterator[2];
        a[0] = c1;
        a[1] = c2;
        return a;
     }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        c1 = children[0];
        c2 = children[1];
        cur1 = null;
    }

}

package simpledb;

import java.lang.reflect.Array;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */

    JoinPredicate pred;
    DbIterator c1, c2;
    Tuple cur1, cur2;
    HashMap<Field, ArrayList<Tuple> > map;
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        pred = p;
        c1 = child1;
        c2 = child2;
        cur1 = null;
        cur2 = null;
        map = new HashMap<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return pred;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(c1.getTupleDesc(), c2.getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
        return c1.getTupleDesc().getFieldName(pred.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return c2.getTupleDesc().getFieldName(pred.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        c1.open();
        c2.open();
        cur1 = null;
        cur2 = null;
        map.clear();
        while (c1.hasNext()) {
            Tuple t = c1.next();
            Field f = t.getField(pred.getField1());
            if (map.containsKey(f)) {
                ArrayList<Tuple> a = map.get(f);
                a.add(t);
                map.put(f, a);
            } else {
                ArrayList<Tuple> a = new ArrayList<>();
                a.add(t);
                map.put(f, a);
            }
        }
        c1.rewind();
    }

    public void close() {
        super.close();
        c1.close();
        c2.close();
        cur1 = null;
        cur2 = null;
        listIt = null;
        map.clear();
        // some code goes here
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt == null || !listIt.hasNext()) {
            while (c2.hasNext()) {
                cur2 = c2.next();
                Field f = cur2.getField(pred.getField2());
                if (map.containsKey(f)) {
                    ArrayList<Tuple> a = map.get(f);
                    listIt = a.iterator();
                    break;
                }
            }
        }
        if (listIt == null || !listIt.hasNext()) {
            return null;
        }
        cur1 = listIt.next();
        TupleDesc td = getTupleDesc();
        Tuple ret = new Tuple(td);
        int len = td.numFields();
        int len1 = cur1.getTupleDesc().numFields();
        for (int i = 0; i < len; i++) {
            if (i < len1) {
                ret.setField(i, cur1.getField(i));
            } else {
                ret.setField(i, cur2.getField(i-len1));
            }
        }
        return ret;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] a = new DbIterator[2];
        a[0] = c1;
        a[1] = c2;
        return a;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        c1 = children[0];
        c2 = children[1];
        cur1 = null;
    }
    
}
